<!DOCTYPE html>
<html>

<head>
  <title>New Sails App</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <% /* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <% /* <meta name="robots" content="noindex"> */%>


      <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

      <!--STYLES-->
      <link rel="stylesheet" href="/styles/importer.css">
      <!--STYLES END-->

      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
</head>

<body>
  <% if (req.session.userid) { %>
    <nav class="navbar" role="navigation" aria-label="main navigation">
      <div class="navbar-brand">
        <a class="navbar-item" href="http://localhost:1337/priceTracker/homepage">
          <img src="https://www.linkpicture.com/q/Shop-name-2.png" width="100" height="300">
        </a>

        <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false"
          data-target="navbarBasicExample">
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
        </a>
      </div>

      <div id="navbarBasicExample" class="navbar-menu">
        <div class="navbar-start">
          <p class="navbar-item">
            Hi, <%= req.session.name %>
          </p>
          <a class="navbar-item" href="http://localhost:1337/priceTracker/homepage">
            Home
          </a>
          <a class="navbar-item" onclick="logout('<%= req.session.userid %>')">
            Logout
          </a>
        </div>
      </div>

      <div class="navbar-end">
        <div class="navbar-item">
          <div class="buttons">
            <a class="button is-white" href="http://localhost:1337/user/account/<%= req.session.userid %>">
              <i class="fa fa-user" style="font-size:36px"></i>
            </a>
            <a class="button is-white" href="http://localhost:1337/user/wallet/<%= req.session.userid %>">
              <i class="fa fa-wallet" style="font-size:36px"></i>
            </a>
            <a class="button is-white" href="http://localhost:1337/user/purchase">
              <i class="fa fa-shopping-cart" style="font-size:36px"></i>
            </a>
          </div>
        </div>
      </div>
    </nav>
    <% } %>



      <section class="section">
        <div class="container columns is-centered">
          <div class="column is-half">

            <%- body %>

          </div>
        </div>
      </section>



      <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

      <!--TEMPLATES-->
      <!--TEMPLATES END-->


      <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


      <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

      <!--SCRIPTS-->
      <script src="/dependencies/sails.io.js"></script>
      <!--SCRIPTS END-->
      <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>



      <script>
        async function logout() {
          var r = confirm("Logout?");

          if (r) {
            var response = await fetch("/user/logout", {
              method: "POST"
            });

            if (response.ok) {
              alert("Logout success");
              location.assign("/");
            } else {
              alert(response.status + ": " + response.statusText);
            }
          } else {
            alert(response.statusText);
          }
        };
      </script>
</body>

</html>